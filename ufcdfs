
### UFC ###
```{r UFC}

num_lineups <- 20
use_coach <- FALSE

UFCProjections <- read.csv("C:/Users/jorda/Downloads/UFC DFS Projections.csv")
data <- read_dk("C:/Users/jorda/Downloads/DKSalariesUFC.csv")
bans <- c("Julian Marquez", "Deron Winn")

fights <- select(UFCProjections, fight) %>%
  distinct()

fights$team <- 0

for(i in 1:length(fights$fight)){
  fights$team[i] = i
}


UFCProjections <- select(UFCProjections, Name, Salary, ID, X..win, win.proj, win.SD, fight) %>%
  merge(fights)

UFCProjections$X..win <- as.numeric(gsub("[//%,]", "",UFCProjections$X..win))
UFCProjections$win.proj <- as.numeric(gsub("[//%,]", "",UFCProjections$win.proj))
UFCProjections$fpts_proj <- UFCProjections$win.proj * UFCProjections$X..win/100

UFCProjections <- rename(UFCProjections, player = Name, SD = win.SD)

UFCProjections <- select(UFCProjections, player, fpts_proj, SD, team)
data <- select(data, -fpts_proj, -team)

data <- merge(data, UFCProjections)
data$team <- as.character(data$team)
data$position <- "F"

data <- data[!is.na(data$team),]
data <- filter(data, !is.na(fpts_proj), !player %in% bans)

data <- data[order(data$row_id),]
for(i in 1:length(data$row_id)){
  data$row_id[i] <- i
}

model <- model_generic(data, total_salary = 50000, roster_size = 6, max_from_team = 1)

n <- nrow(data)
randomness <- function(x) rnorm(n, mean = data$fpts_proj, sd = data$SD)

if(use_coach){
results <- optimize_generic(data, model, L = num_lineups, randomness = randomness)

write_lineups(results, "C:/Users/jorda/Downloads/DKlineupsUFC.csv", site = "draftkings", sport = "pga")
}else{

  for(t in 1:num_lineups){
### my optimizer

## Objective

objective.in <- rnorm(length(data$fpts_proj), data$fpts_proj, data$SD)

## Constraint matrix - salary, then count of fight #, then row of 1s

num_fights <- max(as.numeric(data$row_id))

matrix_vector <- data$salary
m <- length(matrix_vector)

for(i in 1:num_fights){
  n <- length(matrix_vector)
  for(j in 1:m){
    if(as.numeric(data$team[j])==i){
      matrix_vector[n+j] = 1
    } else{
      matrix_vector[n+j] = 0
    }
  }
}
n <- length(matrix_vector)

for(i in 1:m){
  matrix_vector[n+i] = 1
}

const.mat = matrix(matrix_vector, nrow = num_fights + 2, byrow = TRUE)

## Define constraints and direction - 50000 salary, 1 for each fight
const.rhs = c(50000)
const.dir = c("<=")

for(i in 1:num_fights){
  const.rhs[i+1] = 1
  const.dir[i+1] = "<="
}

const.rhs[num_fights+2] = 6
const.dir[num_fights+2] = "=="


### Optimize

optimum = lp(direction = "max", objective.in, const.mat, const.dir, const.rhs, all.bin = TRUE)

data$optimal <- optimum$solution

lineup <- filter(data, optimal == 1) %>%
  select(player)

if(t > 1){
  lineups <- cbind(lineups, lineup)
} else{
  lineups <- lineup
}
  }
  
lineups <- t(lineups)
export_to_dk <- lineups

for(k in 1:length(export_to_dk)){
rep <- match(lineups[k], data$player)
rep <- data$player_id[rep]
export_to_dk[k] <- rep
}

colnames(export_to_dk) <- c("F","F","F","F","F","F")

}

ownership <- data %>%
  select(player)
ownership$ownership_pct <- 0

for(i in 1:length(ownership$player)){
  ownership$ownership_pct[i] = sum(lineups == ownership$player[i])
}
ownership$ownership_pct <- ownership$ownership_pct/ length(lineups[,1])*100

write.csv(export_to_dk, "C:/Users/jorda/Downloads/DKlineupsUFC.csv", row.names = FALSE)

```
